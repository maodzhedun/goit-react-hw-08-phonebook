{"version":3,"file":"static/js/178.cb74a4ad.chunk.js","mappings":"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","sources":["components/App/App.styled.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactListItem/ContactListItem.styled.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","pages/ContactPages.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ContainerApp = styled.div`\n  width: 768px;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 12px 18px;\n  h1,\n  h2,\n  h3 {\n    text-align: center;\n  }\n`;\n\n\n","import styled from '@emotion/styled';\n\nexport const Filtered = styled.label`\n  padding: 6px;\n  width: 200px;\n  background-color: transparent;\n  /* border: 1px solid black; */\n  font-size: 18px;\n  font-weight: 600;\n\n  input {\n    margin-left: 6px;\n    width: 250px;\n    padding: 4px;\n  }\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { setFilter, selectFilter } from '../../redux/contacts/filterSlice';\nimport { Filtered } from './Filter.styled';\n\nconst Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const handleFilter = event => {\n    dispatch(setFilter(event.target.value));\n  };\n\n  return (\n    <Filtered>\n      Find contacts by name\n      <input type=\"text\" name=\"filter\" value={filter} onChange={handleFilter} />\n    </Filtered>\n  );\n};\n\nexport default Filter;\n","import styled from \"@emotion/styled\";\n\nexport const Item = styled.li`\n    display: flex;\n    align-items: center;\n    padding: 8px;\n    border: 2px dashed blueviolet;\n\n    button {\n        cursor: pointer;\n        border: none;\n        margin-left: auto;\n        font-size: 22px;\n        padding: 4px 34px;\n        background-color: coral;\n        border-radius: 4px;\n\n    }\n`","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact, updateContact } from '../../redux/contacts/contactsOperations';\nimport { Item } from './ContactListItem.styled';\n\nconst ContactListItem = ({ contact }) => {\n  const dispatch = useDispatch();\n  const id = contact.id;\n\n    // State to manage editing mode and form inputs\n    const [isEditing, setIsEditing] = useState(false);\n    const [name, setName] = useState(contact.name);\n    const [number, setNumber] = useState(contact.number);\n  \n    const handleEditToggle = () => {\n      setIsEditing(!isEditing);\n    };\n  \n    const handleUpdate = (e) => {\n      e.preventDefault();\n      dispatch(updateContact({ id, contact: { name, number } }));\n      setIsEditing(false); // Close the edit form after updating\n    };\n\n    return (\n      <Item key={id}>\n        {isEditing ? (\n          <form onSubmit={handleUpdate}>\n            <input\n              type=\"text\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              required\n            />\n            <input\n              type=\"text\"\n              value={number}\n              onChange={(e) => setNumber(e.target.value)}\n              required\n            />\n            <button type=\"submit\">Save</button>\n            <button type=\"button\" onClick={handleEditToggle}>Cancel</button>\n          </form>\n        ) : (\n          <>\n            {contact.name}: {contact.number}\n            <button type=\"button\" onClick={handleEditToggle}>\n              Edit\n            </button>\n            <button type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n              Delete\n            </button>\n          </>\n        )}\n      </Item>\n    );\n  };\n\nexport default ContactListItem;\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  font-size: 20px;\n  gap: 12px;\n`;\n","import { useSelector } from 'react-redux';\nimport { selectFilter } from '../../redux/contacts/filterSlice';\nimport ContactListItem from 'components/ContactListItem/ContactListItem';\nimport { List } from './ContactList.styled';\nimport { selectContacts } from '../../redux/contacts/contactsSlice';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  console.log('contacts:', contacts);\n  const filter = useSelector(selectFilter);\n\n  const normalizedFilter = filter.toLowerCase();\n  const visibleContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n  console.log('visibleContacts', visibleContacts);\n  if (!contacts.length) return <div>Нет контактов</div>;\n\n  return (\n    <List>\n      {visibleContacts.map(contact => (\n        <ContactListItem key={contact.id} contact={contact} />\n      ))}\n    </List>\n  );\n};\n\nexport default ContactList;\n","import styled from '@emotion/styled';\n\nexport const FormEl = styled.div`\n  width: 500px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin: auto;\n  gap: 12px;\n\n  label {\n    display: flex;\n    flex-direction: column;\n    gap: 4px;\n    font-size: 18px;\n    font-weight: 600;\n  }\n\n  input {\n    width: 250px;\n    padding: 4px;\n  }\n  button {\n    display: block;\n    cursor: pointer;\n    margin-left: auto;\n    margin-right: auto;\n    padding: 8px;\n    border-radius: 6px;\n    background-color: rgb(111, 142, 79);\n    border: none;\n    margin-top: 30px;\n  }\n`;\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/contacts/contactsOperations';\nimport { FormEl } from './ContactForm.styled';\nimport { selectContacts } from '../../redux/contacts/contactsSlice';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  console.log(contacts);\n\n  const handleInputChange = event => {\n    const { name, value } = event.target;\n\n    if (name === 'name') setName(value);\n    if (name === 'number') setNumber(value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (contacts.find(contact => contact.name === name)) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n\n    dispatch(addContact({ name, number }));\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <FormEl>\n      <form onSubmit={handleSubmit}>\n        <label>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            required\n            onChange={handleInputChange}\n          />\n        </label>\n        <label>\n          Number\n          <input\n            type=\"text\"\n            name=\"number\"\n            value={number}\n            required\n            onChange={handleInputChange}\n          />\n        </label>\n        <button type=\"submit\">Add contact</button>\n      </form>\n    </FormEl>\n  );\n};\n\nexport default ContactForm;\n","import React from 'react';\nimport { ContainerApp } from 'components/App/App.styled';\nimport Filter from 'components/Filter/Filter';\nimport ContactList from 'components/ContactList/ContactList';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { useEffect } from 'react';\n\nimport { selectContacts, selectContactsState, selectError, selectIsLoading } from '../redux/contacts/contactsSlice';\nimport { fetchContacts } from '../redux/contacts/contactsOperations';\n\nfunction ContactPages() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContactsState);\n  const items = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  console.log(contacts, items, isLoading, error);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <ContainerApp>\n      <div>\n        <title>ContactPages</title>\n        <h1>Phonebook</h1>\n        <ContactForm />\n      </div>\n      <div>\n        <h2>Contacts</h2>\n        <Filter />\n        {isLoading && <p>Loading...</p>}\n        {error && <p style={{ color: 'red' }}>Error: {error}</p>}\n        <ContactList />\n      </div>\n    </ContainerApp>\n  );\n}\n\nexport default ContactPages;\n"],"names":["ContainerApp","styled","div","_templateObject","_taggedTemplateLiteral","Filtered","label","Filter","filter","useSelector","selectFilter","dispatch","useDispatch","_jsxs","children","_jsx","type","name","value","onChange","event","setFilter","target","Item","li","_ref","contact","id","isEditing","setIsEditing","useState","setName","number","setNumber","handleEditToggle","onSubmit","e","preventDefault","updateContact","required","onClick","_Fragment","deleteContact","List","ul","ContactList","contacts","selectContacts","console","log","normalizedFilter","toLowerCase","visibleContacts","includes","length","map","ContactListItem","FormEl","ContactForm","handleInputChange","find","alert","concat","addContact","selectContactsState","items","isLoading","selectIsLoading","error","selectError","useEffect","fetchContacts","style","color"],"sourceRoot":""}