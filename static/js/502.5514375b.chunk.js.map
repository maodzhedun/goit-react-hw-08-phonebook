{"version":3,"file":"static/js/502.5514375b.chunk.js","mappings":"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","sources":["components/App/App.styled.jsx","components/Filter/Filter.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/ui/toaster.jsx","components/ContactForm/ContactForm.jsx","pages/ContactPages.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ContainerApp = styled.div`\n  width: 768px;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 12px 18px;\n  h1,\n  h2 ,\n  h3 {\n    text-align: center;\n  }\n`;\n\n\n","import { useSelector, useDispatch } from 'react-redux';\nimport { setFilter, selectFilter } from '../../redux/contacts/filterSlice';\n// import { Filtered } from './Filter.styled';\nimport {\n  Box,\n  Field,\n  Input,\n} from '@chakra-ui/react';\n\nconst Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const handleFilter = event => {\n    dispatch(setFilter(event.target.value));\n  };\n\n  return (\n    <Box\n      p={4} \n      borderWidth=\"1px\" \n      borderRadius=\"lg\" \n      boxShadow=\"sm\" \n      maxWidth=\"md\" \n      mx=\"auto\" \n      mb={6} \n    >\n      <Field.Root id=\"filter\">\n        <Field.Label>Find contacts by name</Field.Label>\n        <Input\n          type=\"text\"\n          name=\"filter\"\n          value={filter}\n          onChange={handleFilter}\n          placeholder=\"Search contacts...\"\n          borderRadius=\"md\"\n        />\n      </Field.Root>\n    </Box>\n  );\n};\n\nexport default Filter;\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n  deleteContact,\n  updateContact,\n} from '../../redux/contacts/contactsOperations';\n// import { Item } from './ContactListItem.styled';\nimport {\n  ListItem, \n  Text, \n  Button, \n  HStack, \n  Input, \n  Box, \n  VStack,\n  Field, \n} from '@chakra-ui/react';\n\nconst ContactListItem = ({ contact }) => {\n  const dispatch = useDispatch();\n  const id = contact.id;\n\n  // State to manage editing mode and form inputs\n  const [isEditing, setIsEditing] = useState(false);\n  const [name, setName] = useState(contact.name);\n  const [number, setNumber] = useState(contact.number);\n\n  const handleEditToggle = () => {\n    setIsEditing(!isEditing);\n    if (isEditing) {\n      setName(contact.name);\n      setNumber(contact.number);\n    }\n  };\n\n  const handleUpdate = e => {\n    e.preventDefault();\n    dispatch(updateContact({ id, contact: { name, number } }));\n    setIsEditing(false); // Close the edit form after updating\n  };\n\n  return (\n    <ListItem\n      key={id}\n      p={3} \n      borderWidth=\"1px\" \n      borderRadius=\"md\" \n      mb={2} s\n      display=\"flex\" \n      justifyContent=\"space-between\" \n      alignItems=\"center\" \n      flexWrap=\"wrap\" \n    >\n      {isEditing ? (\n        <Box onSubmit={handleUpdate} width=\"full\" as=\"form\" >\n          <VStack spacing={2} align=\"stretch\">\n            <Field.Root id={`edit-name-${id}`}>\n              <Field.Label>Name</Field.Label>\n              <Input\n                type=\"text\"\n                value={name}\n                onChange={e => setName(e.target.value)}\n                required\n                placeholder=\"Name\"\n                borderRadius=\"md\"\n              />\n            </Field.Root>\n            <Field.Root id={`edit-number-${id}`}>\n              <Field.Label>Number</Field.Label>\n              <Input\n                type=\"text\"\n                value={number}\n                onChange={e => setNumber(e.target.value)}\n                required\n                placeholder=\"Number\"\n                borderRadius=\"md\"\n              />\n            </Field.Root>\n            <HStack spacing={2} justifyContent=\"flex-end\" width=\"full\">\n              {' '}\n              {/* Buttons for save/cancel */}\n              <Button\n                type=\"submit\"\n                colorScheme=\"blue\"\n                size=\"sm\"\n                borderRadius=\"md\"\n              >\n                Save\n              </Button>\n              <Button\n                type=\"button\"\n                onClick={handleEditToggle}\n                size=\"sm\"\n                variant=\"outline\"\n                borderRadius=\"md\"\n              >\n                Cancel\n              </Button>\n            </HStack>\n          </VStack>\n        </Box>\n      ) : (\n        <>\n          <Text fontSize=\"lg\" fontWeight=\"medium\" flex=\"1\" mr={4}>\n            {' '}\n            {/* Display contact info */}\n            {contact.name}: {contact.number}\n          </Text>\n          <HStack spacing={2}>\n            {' '}\n            {/* Buttons for edit/delete */}\n            <Button\n              type=\"button\"\n              onClick={handleEditToggle}\n              size=\"sm\"\n              colorScheme=\"teal\"\n              variant=\"outline\"\n              borderRadius=\"md\"\n            >\n              Edit\n            </Button>\n            <Button\n              type=\"button\"\n              onClick={() => dispatch(deleteContact(id))}\n              size=\"sm\"\n              colorScheme=\"red\"\n              borderRadius=\"md\"\n            >\n              Delete\n            </Button>\n          </HStack>\n        </>\n      )}\n    </ListItem>\n  );\n};\n\nexport default ContactListItem;\n","import { useSelector } from 'react-redux';\nimport { selectFilter } from '../../redux/contacts/filterSlice';\nimport ContactListItem from 'components/ContactListItem/ContactListItem';\n// import { List } from './ContactList.styled';\nimport { selectContacts } from '../../redux/contacts/contactsSlice';\nimport { ListRoot } from '@chakra-ui/react';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const normalizedFilter = filter.toLowerCase();\n  const visibleContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n\n  if (!contacts.length) return <div>Нет контактов</div>;\n\n  return (\n    <ListRoot>\n      {visibleContacts.map(contact => (\n        <ContactListItem key={contact.id} contact={contact} />\n      ))}\n    </ListRoot>\n  );\n};\n\nexport default ContactList;\n","'use client';\n\nimport {\n  Toaster as ChakraToaster,\n  Portal,\n  Spinner,\n  Stack,\n  Toast,\n  createToaster,\n} from '@chakra-ui/react';\n\nexport const toaster = createToaster({\n  placement: 'bottom-end',\n  pauseOnPageIdle: true,\n});\n\nexport const Toaster = () => {\n  return (\n    <Portal>\n      <ChakraToaster toaster={toaster} insetInline={{ mdDown: '4' }}>\n        {toast => (\n          <Toast.Root\n            width={{ md: 'sm' }}\n            // Conditionally apply background color for warning toasts\n            sx={{\n              background: toast.type === 'warning' ? 'yellow.100' : undefined, // Example: Light yellow background for warning\n              color: toast.type === 'warning' ? 'yellow.800' : undefined, // Example: Darker text for contrast\n              // You can add other conditional styles here if needed\n            }}\n          >\n            {toast.type === 'loading' ? (\n              <Spinner size=\"sm\" color=\"blue.solid\" />\n            ) : (\n              <Toast.Indicator />\n            )}\n            <Stack gap=\"1\" flex=\"1\" maxWidth=\"100%\">\n              {toast.title && <Toast.Title>{toast.title}</Toast.Title>}\n              {toast.description && (\n                <Toast.Description>{toast.description}</Toast.Description>\n              )}\n            </Stack>\n            {toast.action && (\n              <Toast.ActionTrigger>{toast.action.label}</Toast.ActionTrigger>\n            )}\n            {toast.closable && <Toast.CloseTrigger />}\n          </Toast.Root>\n        )}\n      </ChakraToaster>\n    </Portal>\n  );\n};\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/contacts/contactsOperations';\n// import { FormEl } from './ContactForm.styled';\nimport { selectContacts } from '../../redux/contacts/contactsSlice';\nimport { Box, Button, Field, Input, VStack } from '@chakra-ui/react';\nimport { Toaster, toaster } from 'components/ui/toaster';\n\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n\n  const handleInputChange = event => {\n    const { name, value } = event.target;\n\n    if (name === 'name') setName(value);\n    if (name === 'number') setNumber(value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (contacts.find(contact => contact.name === name)) {\n      // Use Chakra UI Toast for notifications instead of alert()\n      toaster.create({\n        title: 'Contact already exists.',\n        description: `${name} is already in your contacts.`,\n        status: 'warning',\n        type: 'warning',\n        duration: 3000,\n        isClosable: true,\n        position: 'top-right',\n      });\n      return;\n    }\n\n    dispatch(addContact({ name, number }));\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Box\n      as=\"form\" \n      onSubmit={handleSubmit}\n      p={8} \n      borderWidth={1} \n      borderRadius=\"lg\" \n      boxShadow=\"lg\" \n      maxWidth=\"md\" \n      mx=\"auto\" \n      mt={10} \n      mb={8} \n    >\n      <VStack spacing={4} align=\"stretch\">\n        <Field.Root id=\"contactName\">\n          {' '}\n          {/* Unique ID for this field */}\n          <Field.Label>Name</Field.Label>\n          <Input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            required\n            onChange={handleInputChange}\n          />\n        </Field.Root>\n        <Field.Root id=\"contactNumber\">\n          {' '}\n          {/* Unique ID for this field */}\n          <Field.Label>Number</Field.Label>\n          <Input\n            type=\"text\"\n            name=\"number\"\n            value={number}\n            required\n            onChange={handleInputChange}\n          />\n        </Field.Root>\n        <Button\n          type=\"submit\"\n          colorScheme=\"teal\" \n          size=\"lg\" \n          mx=\"auto\" \n          width=\"50%\" \n          mt={4} \n          borderRadius=\"md\" \n        >\n          Add contact\n        </Button>\n        <Toaster />\n      </VStack>\n    </Box>\n  );\n};\n\nexport default ContactForm;\n","import React from 'react';\nimport { ContainerApp } from 'components/App/App.styled';\nimport Filter from 'components/Filter/Filter';\nimport ContactList from 'components/ContactList/ContactList';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { useEffect } from 'react';\n\nimport { selectError, selectIsLoading } from '../redux/contacts/contactsSlice';\nimport { fetchContacts } from '../redux/contacts/contactsOperations';\nimport { Heading } from '@chakra-ui/react';\n\nfunction ContactPages() {\n  const dispatch = useDispatch();\n  // const contacts = useSelector(selectContactsState);\n  // const items = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  // console.log(contacts, items, isLoading, error);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <ContainerApp>\n      <div>\n        <title>ContactPages</title>\n        <h1>Phonebook</h1>\n        <ContactForm />\n      </div>\n      <div>\n        <Heading as=\"h2\" size=\"lg\" mb={4}>Contacts</Heading>\n        <Filter />\n        {isLoading && <p>Loading...</p>}\n        {error && <p style={{ color: 'red' }}>Error: {error}</p>}\n        <ContactList />\n      </div>\n    </ContainerApp>\n  );\n}\n\nexport default ContactPages;\n"],"names":["ContainerApp","styled","div","_templateObject","_taggedTemplateLiteral","Filter","filter","useSelector","selectFilter","dispatch","useDispatch","_jsx","Box","p","borderWidth","borderRadius","boxShadow","maxWidth","mx","mb","children","_jsxs","Field","id","Input","type","name","value","onChange","event","setFilter","target","placeholder","_ref","contact","isEditing","setIsEditing","useState","setName","number","setNumber","handleEditToggle","ListItem","s","display","justifyContent","alignItems","flexWrap","onSubmit","e","preventDefault","updateContact","width","as","VStack","spacing","align","concat","required","HStack","Button","colorScheme","size","onClick","variant","_Fragment","Text","fontSize","fontWeight","flex","mr","deleteContact","ContactList","contacts","selectContacts","normalizedFilter","toLowerCase","visibleContacts","includes","length","ListRoot","map","ContactListItem","toaster","createToaster","placement","pauseOnPageIdle","Toaster","Portal","ChakraToaster","insetInline","mdDown","toast","Toast","md","sx","background","undefined","color","Spinner","Stack","gap","title","description","action","label","closable","ContactForm","handleInputChange","find","create","status","duration","isClosable","position","addContact","mt","isLoading","selectIsLoading","error","selectError","useEffect","fetchContacts","Heading","style"],"sourceRoot":""}